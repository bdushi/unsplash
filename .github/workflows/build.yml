name: Build

on:
  pull_request:
  push:
    branches:
      - main
env:
  UN_SPLASH_API_KEY: ${{ secrets.UN_SPLASH_API_KEY }}
  UN_OFFICIAL_GITHUB_TOKEN: ${{ secrets.UN_OFFICIAL_GITHUB_TOKEN }}
  SIGNING_KEY: ${{ secrets.SIGNING_KEY }}
  ALIAS: ${{ secrets.ALIAS }}
  STORE_PASSWORD: ${{ secrets.STORE_PASSWORD }}
  KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        os: [ ubuntu-latest ]
        java: [ 19 ]

    steps:
      - name: Checkout the code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
        # Load Api Key from secrets and write to local.properties
      - name: Load UnSplash ApiKey from secrets and write to local.properties
        run: echo UN_SPLASH_API_KEY = "$UN_SPLASH_API_KEY" >> ./local.properties

      - name: Load Github ApiKey from secrets and write to local.properties
        run: echo UN_OFFICIAL_GITHUB_TOKEN = \"$UN_OFFICIAL_GITHUB_TOKEN\" >> ./local.properties

      - name: Set Up JDK ${{ matrix.java }}
        uses: actions/setup-java@v2
        with:
          java-version: ${{ matrix.java }}
          distribution: 'temurin'
          cache: gradle
        env:
          GITHUB_TOKEN: ${{ env.UN_OFFICIAL_GITHUB_TOKEN }}

      - name: Cache Gradle dependencies
        uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle.kts') }}
          restore-keys: ${{ runner.os }}-gradle-

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      - name: Execute Gradle build
        run: ./gradlew build

      - name: Build the app
#        run: ./gradlew assembleRelease --stacktrace
        run: ./gradlew assemble

      - name: Sign APK
        uses: r0adkll/sign-android-release@v1
        # ID used to access action output
        id: sign
        with:
          releaseDirectory: app/build/outputs/apk/release
          signingKeyBase64: ${{ env.SIGNING_KEY }}
          alias: ${{ env.ALIAS }}
          keyStorePassword: ${{ env.STORE_PASSWORD }}
          keyPassword: ${{ env.KEY_PASSWORD }}

#      - uses: actions/upload-artifact@v2
#        with:
#          name: release.apk
#          path: ${{steps.sign.outputs.signedReleaseFile}}

      - name: Get App version code
        id: version
        run: |
          echo "::set-output name=commits::$(git rev-list --count HEAD)"

      - name: Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ steps.version.outputs.commits }}
          release_name: Release v.1.${{ steps.version.outputs.commits }}
        env:
          GITHUB_TOKEN: ${{ env.UN_OFFICIAL_GITHUB_TOKEN }}

      - name: Debug Local Properties file
        run: |
          cat local.properties

#      - name: Publish package
#        uses: gradle/gradle-build-action@937999e9cc2425eddc7fd62d1053baf041147db7
#        with:
#          arguments: publish
#        run: ./gradlew publish
#        run: ./gradlew :unsplash:publishReleasePublicationToGitHubPackagesRepository
#        uses:  actions/upload-artifact@v3
#        with:
#          arguments: publish
#        env:
#          GITHUB_TOKEN: ${{ secrets.UN_OFFICIAL_GITHUB_TOKEN  }}

      - name: Publish AAR to GitHub Packages
        uses: actions/upload-artifact@v3
        with:
          name: unsplash
          path: app/build/outputs/aar/unsplash-release.aar

#      - name: Publish AAR to GitHub Packages
#        env:
#          GITHUB_TOKEN: ${{ secrets.UN_OFFICIAL_GITHUB_TOKEN }}
#        run: ./gradlew publish

      - name: Upload Release APK
        id: upload_release_asset
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.UN_OFFICIAL_GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.sign.outputs.signedReleaseFile }}
          asset_name: signed-app.apk
          asset_content_type: application/zip
